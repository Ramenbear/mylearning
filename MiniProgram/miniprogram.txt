1.小程序是全新的连接用户和服务的方式,在微信内便捷的体验和传播
2.小程序的主要开发语言是JavaScript,小程序的开发同普通的网页开发相比有很大的相似性
​    网页开发渲染线程和脚本线程是互斥的,长时间的脚本运行可能会导致页面失去响应
    在小程序中,二者是分开的,分别运行在不同的线程中,网页开发者可以使用到各种浏览器暴露出来的DOM API
    进行DOM选中和操作,小程序的逻辑层和渲染层是分开的,逻辑层运行在JSCore中
    并没有一个完整浏览器对象,因而缺少相关的DOM API和BOM API,这一区别导致了前端开发非常熟悉的一些库
    例如jQuery,Zepto等,在小程序中是无法运行的,同时JSCore的环境同NodeJS环境也是不尽相同
    所以一些 NPM 的包在小程序中也是无法运行的
3.配置小程序
    1.开发需求被规定在配置文件中
    2.保证开发出来的小程序风格一致
        1.app.json:全局配置
            1.页面路径
            2.界面表现
            3.网络超时时间
            4.底部tab
        2.page.json:页面配置
        3.project.config.json:项目配置文件,工具配置
        4.sitemap.json:微信检索,会被关键字检索出来
    3.JSON是一种数据格式,不是编程语言
        语法:JSON文件被包括在一个{},通过key-value来表达数据
            key必须加上一个双引号
        数据格式:
            数字/字符串/布尔值/数组/对象/null
4.所有页面必须在json中注册才能使用
5.wxml和html
    1.html根据基础标签组成想要的组件
    2.wxml直接将常用组件包装起来
        比如 view button text 地图 视频 音频
    3.mvvm,渲染和逻辑分离,也就是不让JS直接操作DOM
        JS只需要管理状态,然后通过模板语法来描述
6.wxss
    新增了rpx,将换算交给底层去做
7.双线程模型
    宿主环境:微信客户端
        为了执行小程序的各种文件:wxml,wxss,js
        提供了小程序的双线程模型
    整体上开了两个线程:
        1.渲染层:webview
            wxml,wxss
            多页面使用多个webview的线程
        2.逻辑层:jscore
            js
    都经由微信客户端native进行中转交互
    首先转化成js对象,再生成一棵DOM树
    数据变化,生成一棵新的DOM树,通过diff算法来对比变化的部位
    然后将差异应用到原来的DOM树上
##小程序启动流程
    1.下载小程序包
    2.启动小程序
    3.加载app.json
    4.注册App()
        执行App生命周期
    5.加载自定义组件代码注册自定义组件
        加载解析page.json
        渲染层加载渲染page.wxml
        逻辑层注册Page()
            执行Page生命周期
##注册App
##组件
    1.text组件
        显示文本,类似span标签,行内元素
            selectable:"{{false}}"是否可选中
            space
            decode
    2.button组件
    3.view组件
        类似div,块级元素,独占一行,容器
##隐藏 
    hidden:组件依然存在
    wx-if:组件不存在,压根没有创建
##block标签
##key:提高性能,绑定一个id,对相同的进行复用,高效的更新虚拟DOM
    diff算法,在需要插入时依次改变
    key给每个节点做一个唯一标识,用于diff正确识别节点
##模板
    template 代码复用
##wxs模块
    小程序的一套脚本语言,结合wxml可以构建页面的结构
    与js是不同的语言,有自己的语法,不和js一致(基本一致)
    与js代码是隔离的,不能调用js中定义的函数以及小程序提供的API
    不能作为组件的事件回调
    在ios上会比js快很多,安卓上无差异
##事件对象
    某个事件触发,就会产生一个事件对象,并将这个对象传入到回调函数中
    touches:记录当前有几个手指在小程序中触摸以及触摸点的信息
    changedTouches:只是记录变化的
    currentTarget:触发事件的
    target:产生事件的
    事件的传递参数:
##事件冒泡和事件捕获
    往外冒泡,往里捕获
##bindtap和catchtap的区别是什么？
    bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡
##组件化开发
    组件和页面通信
    数据:properties
    样式:externalClasses
    标签:slot
##项目结构
    1.目录的结构
        1.pages:页面
        2.components:公共组件包
        3.assets:资源图片图标
        4.service:网络请求      
        5.utils:工具相关的东西
    2.项目页面结构
        根据tabbar来划分页面
    3.组件化
    4.商品数据显示
        1.数据模型的设计
            goods:{
                'pop': {page:0, list:[]},
                'mew': {page:0, list:[]},
                'sell': {page:0, list:[]}
            }
        2.发送网络请求,将数据存储起来
            
        3.
##微信小程序组件的生命周期？
    onLoad: 页面加载
    一个页面只会调用一次，可以在 onLoad 中获取打开当前页面所调用的 query 参数
    onShow: 页面显示
    每次打开页面都会调用一次
    onReady: 页面初次渲染完成
    一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互
    onHide: 页面隐藏
    当navigateTo或底部tab切换时调用
    onUnload: 页面卸载
2.简单描述下微信小程序的相关文件类型？
    .json 后缀的 JSON 配置文件
    .wxml 后缀的 WXML 模板文件
    .wxss 后缀的 WXSS 样式文件
    .js 后缀的 JS 脚本逻辑文件
3.app.json 是对当前小程序的全局配置，讲述三个配置各个项的含义？
    pages字段 —— 用于描述当前小程序所有页面路径,让微信客户端知道当前你的小程序页面定义在哪个目录
    window字段 —— 小程序所有页面的顶部背景颜色，文字颜色定义在这里的
    tab字段—小程序全局顶部或底部tab
4.小程序的wxss和css有哪些不一样的地方？
    新像素单位 rpx样式可直接使用import导入
5.小程序有哪些参数传值的方法？
    给HTML元素添加data-属性来传递我们需要的值，然后通过e.currentTarget.dataset或onload的param参数
    获取。但data-名称不能有大写字母和不可以存放对象；
    设置id 的方法标识来传值通过e.currentTarget.id获取设置的id的值,然后通过设置全局对象的方式来
    传递数值；在navigator中添加参数传值
6.如何提高微信小程序的应用速度？
    一、提高页面加载速度
    二、用户行为预测
    三、减少默认data的大小
    四、组件化方案
7.微信小程序与H5的区别？
    第一条是运行环境的不同
    传统的HTML5的运行环境是浏览器，包括webview，而微信小程序的运行环境并非完整的浏览器，是微信开发团队基于浏览器内核完全重构的一个内置解析器，针对小程序专门做了优化，配合自己定义的开发语言标准，提升了小程序的性能。
    第二条是开发成本的不同
    只在微信中运行，所以不用再去顾虑浏览器兼容性，不用担心生产环境中出现不可预料的奇妙BUG
    第三条是获取系统级权限的不同
    接系统级权限都可以和微信小程序无缝衔
8.小程序获取场景值的方法？
	let options = wx.getLanchOptionsSync()
9.小程序onPageScroll方法的使用注意什么？
    由于此方法调用频繁，不需要时，可以去掉，不要保留空方法，并且使用onPageScroll时，
    尽量避免使用setData()，尽量减少setData()的使用频次。
10.小程序视图渲染结束回调？
    使用setData(data, callback)，在callback回调方法中添加后续操作代码
11.小程序同步API和异步API使用时注意事项？
    像wx.setStorageSync这种以Sync结尾的API为同步API
    使用时使用try-catch来查看异常，如果判定API为异步，
    可以在其回调方法success、fail、complete中进行下一步操作
12.小程序对wx:if 和 hidden使用的理解？
    wx:if 有更高的切换消耗。
    hidden 有更高的初始渲染消耗。
    因此，如果需要频繁切换的情景下，用 hidden 更好，如果在运行时条件不大可能改变则 wx:if 较好
13.小程序简单介绍下三种事件对象的属性列表？
    基础事件（BaseEvent）
    type: 事件类型
    timeStamp：事件生成时的时间戳
    target：触发事件的组件的属性值集合
    currentTarget：当前组件的一些属性集合
    自定义事件（CustomEvent）
    detail
    触摸事件（TouchEvent）
    touches
    changedTouches
14.小程序的双向绑定和vue的异同？
    大体相同，但小程序直接this.data的属性是不可以同步到视图的，必须调用this.setData()方法！
15.小程序页面间有哪些传递数据的方法？
    使用全局变量实现数据传递
    页面跳转或重定向时，使用url带参数传递数据
    使用组件模板 template传递参数
    使用数据库传递数据
    小程序wxml与标准的html的异同？
    答：都是用来描述页面的结构；都由标签、属性等构成；标签名字不一样，且小程序标签更少，单一标签更多；多了一些 wx:if 这样的属性以及 {{ }} 这样的表达式、WXML仅能在微信小程序开发者工具中预览，而HTML可以在浏览器内预览；组件封装不同， WXML对组件进行了重新封装，
    小程序运行在JS Core内，没有DOM树和window对象，小程序中无法使用window对象和document对象
16.小程序WXSS和CSS的异同？
答：都是用来描述页面的样子；
WXSS 具有 CSS 大部分的特性，也做了一些扩充和修改；
WXSS新增了尺寸单位，WXSS 在底层支持新的尺寸单位 rpx；
WXSS 仅支持部分 CSS 选择器；
WXSS 提供全局样式与局部样式