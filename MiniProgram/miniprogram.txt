1.小程序是全新的连接用户和服务的方式,在微信内便捷的体验和传播
2.小程序的主要开发语言是JavaScript,小程序的开发同普通的网页开发相比有很大的相似性
​    网页开发渲染线程和脚本线程是互斥的,长时间的脚本运行可能会导致页面失去响应
    在小程序中,二者是分开的,分别运行在不同的线程中,网页开发者可以使用到各种浏览器暴露出来的DOM API
    进行DOM选中和操作,小程序的逻辑层和渲染层是分开的,逻辑层运行在JSCore中
    并没有一个完整浏览器对象,因而缺少相关的DOM API和BOM API,这一区别导致了前端开发非常熟悉的一些库
    例如jQuery,Zepto等,在小程序中是无法运行的,同时JSCore的环境同NodeJS环境也是不尽相同
    所以一些 NPM 的包在小程序中也是无法运行的
3.配置小程序
    1.开发需求被规定在配置文件中
    2.保证开发出来的小程序风格一致
        1.app.json:全局配置
            1.页面路径
            2.界面表现
            3.网络超时时间
            4.底部tab
        2.page.json:页面配置
        3.project.config.json:项目配置文件,工具配置
        4.sitemap.json:微信检索,会被关键字检索出来
    3.JSON是一种数据格式,不是编程语言
        语法:JSON文件被包括在一个{},通过key-value来表达数据
            key必须加上一个双引号
        数据格式:
            数字/字符串/布尔值/数组/对象/null
4.所有页面必须在json中注册才能使用
5.wxml和html
    1.html根据基础标签组成想要的组件
    2.wxml直接将常用组件包装起来
        比如 view button text 地图 视频 音频
    3.mvvm,渲染和逻辑分离,也就是不让JS直接操作DOM
        JS只需要管理状态,然后通过模板语法来描述
6.wxss
    新增了rpx,将换算交给底层去做
7.双线程模型
    宿主环境:微信客户端
        为了执行小程序的各种文件:wxml,wxss,js
        提供了小程序的双线程模型
    整体上开了两个线程:
        1.渲染层:webview
            wxml,wxss
            多页面使用多个webview的线程
        2.逻辑层:jscore
            js
    都经由微信客户端native进行中转交互
    首先转化成js对象,再生成一棵DOM树
    数据变化,生成一棵新的DOM树,通过diff算法来对比变化的部位
    然后将差异应用到原来的DOM树上
##小程序启动流程
    1.下载小程序包
    2.启动小程序
    3.加载app.json
    4.注册App()
        执行App生命周期
    5.加载自定义组件代码注册自定义组件
        加载解析page.json
        渲染层加载渲染page.wxml
        逻辑层注册Page()
            执行Page生命周期
##注册App
##组件
    1.text组件
        显示文本,类似span标签,行内元素
            selectable:"{{false}}"是否可选中
            space
            decode
    2.button组件
    3.view组件
        类似div,块级元素,独占一行,容器
##隐藏 
    hidden:组件依然存在
    wx-if:组件不存在,压根没有创建
##block标签
##key:提高性能,绑定一个id,对相同的进行复用,高效的更新虚拟DOM
    diff算法,在需要插入时依次改变
    key给每个节点做一个唯一标识,用于diff正确识别节点
##模板
    template 代码复用
##wxs模块
    小程序的一套脚本语言,结合wxml可以构建页面的结构
    与js是不同的语言,有自己的语法,不和js一致(基本一致)
    与js代码是隔离的,不能调用js中定义的函数以及小程序提供的API
    不能作为组件的事件回调
    在ios上会比js快很多,安卓上无差异
##事件对象
    某个事件触发,就会产生一个事件对象,并将这个对象传入到回调函数中
    touches:记录当前有几个手指在小程序中触摸以及触摸点的信息
    changedTouches:只是记录变化的
    currentTarget:触发事件的
    target:产生事件的
    事件的传递参数:
##事件冒泡和事件捕获
    往外冒泡,往里捕获
##组件化开发
    组件和页面通信
    数据:properties
    样式:externalClasses
    标签:slot
##项目结构
    1.目录的结构
        1.pages:页面
        2.components:公共组件包
        3.assets:资源图片图标
        4.service:网络请求      
        5.utils:工具相关的东西
    2.项目页面结构
        根据tabbar来划分页面
    3.组件化
    4.商品数据显示
        1.数据模型的设计
            goods:{
                'pop': {page:0, list:[]},
                'mew': {page:0, list:[]},
                'sell': {page:0, list:[]}
            }
        2.发送网络请求,将数据存储起来
            
        3.

