##Vue指令
        1.v-on
        2.v-show/v-if
            1.v-if是动态的向DOM树内添加或者删除DOM元素
              v-show是通过设置设置DOM元素的display样式属性控制显隐
            2.v-if是真实的条件渲染,会在条件块切换中适当得销毁和重建条件块内的事件监听器和子组件
              v-show只是简单的基于css切换
            3.v-if是惰性的,初始渲染时条件为假,则什么也不做,条件第一次为真的时候才开始局部编译
                编译也会被缓存起来
              v-show在任何条件下都被编译,然后被缓存,而且DOM元素会被保留
            4.一般来说v-if有更高的切换消耗,v-show有更高的初始渲染消耗
              因此如果频繁切换,那么v-show较好,运行时条件不大需要改变,则使用v-if
    3.动态样式绑定
        1.v-bind属性指令
            Mustache语法不能作用在HTML特性上，遇到这种情况应该使用v-bind指令
            在渲染的DOM上应用特殊的响应式行为     
    4.表单输入绑定
        v-model 指令在表单<input>,<textarea>及<select>元素上创建双向数据绑定
        它会根据控件类型自动选取正确的方法来更新元素,v-model本质上不过是语法糖
        它负责监听用户的输入事件以更新数据,并对一些极端场景进行一些特殊处理
        原理就是v-bind和v-on(@input)的搭配使用,产生一个事件,随即产生一个event对象
        2.值绑定
            <!-- 当选中时，`picked` 为字符串 "a" -->
            <input type="radio" v-model="picked" value="a">

            <!-- `toggle` 为 true 或 false -->
            <input type="checkbox" v-model="toggle">

            <!-- 当选中第一个选项时，`selected` 为字符串 "abc" -->
            <select v-model="selected">
            <option value="abc">ABC</option>
            </select>
            把值绑定到 Vue 实例的一个动态属性上，这时可以用 v-bind 实现
            并且这个属性的值可以不是字符串
        3.参数特性
            1..lazy转变为在change事件中绑定事件
            2..number修饰符用于将输入内容自动转换成数值
            3..trim自动过滤用户输入进去的首尾空格
##vue组件
    1.组件的基本使用
        iView就是一套基于Vue.js的高质量的UI组件库
        2.组件的基本使用    
            1.调用Vue.extend()方法创建组件构造器
                var MyComponent = Vue.extend({
                    //选项
                })
            2.调用Vue.component()方法注册组件
                Vue.component('my-component', MyComponent)
            3.在Vue实例的作用范围内使用组件
                <div id="app">
                    <my-component></my-component>
                </div>
            4.将1/2结合起来一起写
                <script>
                    Vue.component('my-component', {//第一个参数是标签名称
                        template: '<div>Cookie</div>' //一个选项对象,定义一个组件模板
                    });//在背后自动调用Vue.extend
                </script>
            5.全局组件:可以在每个实例中使用
              局部组件:只能在自己实例中使用
            6.组件的复用
                可以进行任意次的复用,每次创建一个新实例,维护自己的属性
            7.vue组件中的data选项必须是函数,每个实例可以维护一份被返回对象的独立的拷贝
                data: function () {
                    return {
                        count: 0
                    }
                }
                如果data不是函数,那么就会影响到其他实例
            8.通过prop向子组件传递数据
                1.prop 是你可以在组件上注册的一些自定义特性
            9.单个根实例
                1.每个组件必须只有一个根元素,你可以将模板的内容包裹在一个父元素内，来修复这个问题
                    <div class="blog-post">
                        <h3>{{ title }}</h3>
                        <div v-html="content"></div>
                    </div>
                2.当信息越来越多,给每一个信息匹配一个prop,显得很麻烦
                    <blog-post
                        v-for="post in posts"
                        v-bind:key="post.id"
                        v-bind:post="post"
                    ></blog-post>

                    Vue.component('blog-post', {
                        props: ['post'],
                        template: `
                            <div class="blog-post">
                                <h3>{{ post.title }}</h3>
                                <div v-html="post.content"></div>
                            </div>
                            `
                    })
            10.监听子组件事件
            11.使用事件抛出一个值
            12.动态组件
    2.深入组件
        1.组件命名
            Vue.component('my-component-name', { /* ... */ })
            1.kebab-case
                当使用 kebab-case (短横线分隔命名) 定义一个组件时
                必须在引用这个自定义元素时使用 kebab-case，例如 <my-component-name>
            2.PascalCase
                当使用 PascalCase (首字母大写命名) 定义一个组件时，你在引用这个自定义元素时两种命名
                法都可以使用。也就是说 <my-component-name> 和 <MyComponentName> 都是可接受的
                直接在 DOM (即非字符串的模板) 中使用时只有 kebab-case 是有效的
        2.使用props
            组件实例的作用域是孤立的,不能且不应该直接在子组件的模板内直接引用父模板组件中的数据
            通常使用props把数据传给子组件
            var vm = new Vue({
                el: '#app',
                data: {
                    name: 'wulei',
                    age: 18
                },
                components: {
                    'my-component':{
                        template: '#myComponent',
                        props: ['myName', 'myAge']
                    }
                }
            }) 
            要使用父组件中的值,必须在子组件中定义props属性
            <div id="app">
                <my-component v-bind:my-name="name" v-bind:my-age="age"></my-component>
            </div>
            子组件定义props时,使用了camelCase命名法
            当它要用于特性的时候转为kebab-case
            <child-component v-bind:子组件属性="父组件属性"></child-component>
        3.单向数据流
            所有的prop都使得其父子prop之间形成了一个单向下行绑定
            父级 prop 的更新会向下流动到子组件中，但是反过来则不行
            这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解
            额外的,每次父级组件发生更新时,子组件中所有的prop都将会刷新为最新的值
            这意味着你不应该在一个子组件内部改变prop,这样做了Vue会在浏览器的控制台中发出警告
    3.slot插槽内容分发
        slot插槽为父组件提供了安插内容到子组件中的方法
        1.单slot插槽
            默认父组件在子组件内套的内容是不显示的
            除非子组件模板包含至少一个<slot>插口,否则父组件的内容就会被丢弃
            当子组件模板只有一个没有属性的slot时,子组件标签下的整个HTML内容片段将插入
            到slot所在的DOM位置并替换掉slot标签本身
        2.具名slot插槽
            一个组件中使用多个slot
        3.编译作用域
        4.slot作用域插槽
            父组件替换插槽的标签,但是内容由子组件来提供
    4.组件通信
        外层大组件发送网络请求,得到数据,要内部小组件接受数据来展示
        减缓服务器压力,不会让小组件再发送网络请求
        所以需要大组件和小组件之间来进行通信
        父子组件通信、非父子组件的eventBus通信、利用本地缓存实现组件通信、Vuex通信
        1.利用父子组件通信
            1.props 
                默认单向绑定,当父组件的属性发生变化的时候,将传导给子组件
                但是不会反过来,防止子组件无意中修改了父组件的状态
                使用.sync显式的指定双向绑定,子组件的数据会修改会回传给父组件
                .once显式的指定单次绑定,不会同步之后的变化,即使父组件修改了数据,也不会传给子组件
            2.直接在子组件中通过this.$parent调用其父组件,不推荐使用
        2.子组件向父组件通信
            1.自定义事件
                使用一个自定义事件实现子组件与父组件之间的直接通信
                this.$emit("customEvent", "Vue组件学习中")
                把事件沿着作用域链向上派送
            2.$refs
                1.调用子组件的时候,可以制订refs属性
                    <child-component refs="xiaoming"></child-component>
                2.通过$refs得到指定引用名称对应的组件实例
                    this.$refs.xiaoming
        3.任意组件及平行组件通信
            还是通过事件的触发和监听
            需要一个中间件,可以在根组件定义一个所有组件都可以访问到的组件
            使用Vue实例作为中央事件总线,组件A向总线上报事件,组件B通过总线来监听相关事件
        4.父子组件访问方式
            父组件访问子组件: $children/$refs
            子组件访问父组件: $parent
    5.组件data必须是函数
        组件不能直接访问vue实例中的data数据
        组件应该有自己保存数据的地方-data
        data() {
            return {
                title: 'xxx'
            }
        }
        使用函数每次返回一个新的对象,组件实例之间不会相互影响
        如果使用对象,那么组件实例之间互相影响
##自定义指令
    允许用户自定义指令
    1.概述
        自定义指令分为全局指令和局部指令
        定义任何DOM操作,而且可复用
            1.自定义全局指令
                <div id="app">
                    <p>页面载入时,input元素自动获取焦点:</p>
                    <input type="text" v-focus>
                </div>
                <script>
                    Vue.directive('focus',{
                        inserted: function (el) {//当前指令绑定的DOM元素
                            el.focus()
                    }
                })
                new Vue({
                    el: '#app'   
                })
                </script>
            2.自定义局部指令
                directives
    2.钩子函数
        Vue.directive("指令ID",{
            //当该指令第一次绑定到元素上时调用,只调用一次,执行初始化操作
            //指令绑定到元素
            bind:function(){
                alert("bind")
            },
            //元素插入到DOM元素中
            inserted:function(){
                alert("inserted")
            },
            //当被绑定的元素所在模板更新时调用
            updated:function(){
                alert("update")
            },
            //当被绑定元素所在模板完成一次更新时调用
            componentUpdated:function(){
                alert("componentUpdated")
            },
            //当指令和元素解绑的时候调用,只执行一次
            unbind:function(){
                alert("unbind")
            }
        })
    3.钩子函数参数
        el:当前指令绑定的DOM元素
##promise
    1.promise是异步编程的一种解决方案
        处理异步事件
            封装一个网络请求的函数,不能立即拿到结果
            这时候我们会传入另外一个函数,在数据请求成功后,将数据通过传入的函数回调出去
            当网络请求十分复杂的时候,这时候就容易出现回调地狱
    2.对异步操作进行封装
        //参数->函数(resolve, reject)
        //resolve和reject本身也是函数
            new Promise((resolve, reject) => {
                setTimeout((data) => {
                    resolve(data);
                    reject('error message');
                }, 1000)
            }).then((data) => {
                console.log('hello world');
                            ...

                return new Promise((resovle, reject) => {
                    setTimeout(() => {
                        resolve();
                    }, 1000)
                })
            }).catch(err => {

            })
    3.使用
        一般情况下有异步操作时,使用Promise对这个异步操作进行封装
    4.三种状态
        1.pending:等待状态,正在进行网络请求,定时器没有到时间
        2.fulfill:满足状态,主动回调resolve时,回调.then()
        3.reject:拒绝状态,主动回调reject,回调.catch
    5.all方法
        每个请求都满足才成功
##axios
    1.传统的ajax:配置和使用方式混乱,真实开发使用较多的是jQuery-Ajax
    2.jQuery-Ajax:在vue开发中未使用到jQuery
    3.vue-resource:在1.0版本推出,2.0以后就去掉了不再更新
    4.jsonp:解决跨域访问的问题
        通过<script>标签的src属性来帮助我们请求数据
        当我们项目部署在一个服务器上的时候,不能直接访问另一个服务器上的资料
        这时我们利用<script>标签的src帮助我们去服务器请求数据
        将数据当做一个js函数来执行,并且这个过程中传入我们需要的json
        封装jsonp的核心在于我们监听window上的jsonp进行回调的名称
    5.axios
        1.在浏览器中发送XMLHttpRequests请求
        2.在node.js中发送http请求
        3.支持Promise API
        4.拦截请求和响应
        5.装换请求和响应数据
    6.axios实例
        每个实例都有自己相关的一个配置
    7.拦截器
        interceptors:拦截器
        config中不符合要求,请求到响应的过渡动画
        某些登录必须携带特殊信息,没有则跳转到指定的界面
##Vue工程项目实战 
    1.目录结构
        1.src
            1.assets:资源/图片
                1.css
                    1.base.css
                    2.normalize.css
                2.image
            2.components:公共组件
                1.common:下一个项目也可以使用
                2.content:当前项目相关的组件
            3.views:大视图
                首页/分类/购物车/我的
            4.router:路由
            5.store:vuex
            6.network:网络相关
            7.common:公共的js
    2.引用两个css文件
        对大体样式做一个统一
    3.新建vue.config.js
        自己添加一些相关的配置,可以和vue配置相整合,比如起别名
    4..editorconfig.js
        代码风格的配置
    5.项目的模块划分
        tabbar -> 路由映射关系
    6.tabbar/navbar
        封装成为一个组件,预留插槽,让其扩展性更强
    7.network
        首先封装一个大的网络请求
        再封装每个页面独有的网络请求
    8.首页商品数据请求
        1.确定数据结构:
            goods: {
                'pop': {page: 1, list: []},
                'new': {page: 1, list: []},
                'sell' {page: 1, list: []}
            }
            请求过来的数据分别放在各自空间
        2.数据显示
            goodsList
            goodsItem
    9.上拉加载更多
        1.bug:有时候滚动一部分就无法滚动了
            这是因为图片异步加载过来,事先计算好了滚动区域的长度
            当图片真正加载过来,滚动区域远远长于之前的长度
            每加载完成一次图片,这是需要refresh一下,重新计算滚动区域的高度
        2.通过scroll对象监听滚动到底部,然后请求新的数据
    10.点击切换数据
        内部组件发生点击事件
        通过this.$emit向外部传递事件,然后外部更新数据
    11.利用浏览器的滚动,移动端端非常卡顿
        better-scroll:解决方案
    12.返回顶部
        backtop:
    13.防抖和节流
        比如搜索框:我们本意是输入yifu,但是每输入一个字母就发送一次请求
        防抖函数(debounce):把多个顺序的调用合并成为一次,也就是在一定时间内,规定事件被触发的次数
                            this.debounce(this.$refs.refresh, 500)

                            debounce(func, delay) {
                                let timer = null
                                return function(...args) {
                                    if(timer) clearTimeout(timer)
                                    timer = setTimeout(() => {
                                        func.apply(this, args)
                                    }, delay)
                                }
                            }
        节流(throttle):
    14.吸顶效果:
        1.滚动到多少的时候,开始有吸顶效果
            offsetTop:
            所有组件都有一个$el:用于获取组件中的元素
            再图片加载完后再继续计算offsetTop
        2.为了不多次发出事件,使用isLoad进行状态记录
        3.判断tabControl是否吸顶,position:fixed
        4.动态改变样式:
            下面的商品会上移,跟着better-scroll一起滚了上去
        4.使用两个tabControl,下面这个上来的时候,上面这个出来替换
    15.详情页
        跳转页面,详情页布局
            1.navbar
            2.店铺信息
            3.商品介绍
                首先抽离数据,封装到一个类,整合成为一个对象,再交给组件去展示
            4.商品详情数据
            5.参数
    16.购物车
        客服 店铺 加入购物车 购买
    17.Toast弹窗
        出现以下,然后消失
        封装成一个插件:
            import Toast from './Toast'
            const obj = {}
            obj.install = function(Vue) {
                document.body.appendChild(Toast.$el)
                vue.prototype.$toast = 对象;
            }
            export default obj
        封装Toast:this.$toast.show
        1.创建组件构造器
            const toastContrustor = Vue.extend(Toast)
        2.new的方式,根据组件构造器,创建一个组件对象
            const toast = new toastContrustor()
        3.将组件对象,手动挂载到某一个元素上
            toast.$mount(document.createElement('div'))
        4.toast.$el对应的就是div
    18.fastClick减少移动端300ms延迟
    19.图片懒加载
        图片需要显示再加载-vue-lazyload
    20.px2vw-css
        单位:px
        适配:将px全部转成vw
    21.nginx在window下部署
        服务器:没有显示器,24小时开着,为用户提供服务
                自己选择装操作系统,一般选择linux
    22.nginx在linux下部署
    23.响应式原理