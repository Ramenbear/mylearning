1.内存泄漏
    不再用到的内存,没有及时释放
    无法通过js代码来继续引用某个对象,但垃圾回收器却认为这个对象还在被引用
    回收的时候不会释放它
2.很多编程语言需要手动释放内存,一些开发者喜欢系统提供,被称为垃圾回收机制
3.为什么需要垃圾回收机制
    1.JS中的字符串,对象,数组等只有确定固定大小时,才会动态分配内存
        只要像这样动态分配了内存,最终都要释放内存以便可以被再用
    2.垃圾回收策略
        1.标记清除法
            垃圾回收器给存储在内存中的所有变量都加上标记,然后会去掉环境中变量以及
            被环境中的变量引用的变量的标记,剩下的就是视为即将要删除的变量
            因为环境中无法访问到这些变量了
        2.引用计数法
            跟踪记录每个值被引用的次数,当声明变量并将一个引用类型的值赋给该变量
            那么引用次数+1,同一值被赋予另一个变量,该值的引用次数+1
            引用该值的变量被另一个值所取代,引用计数-1
            当计数为0的时候,就无法再访问这个值了,回收内存空间
            缺陷:
                两个函数相互引用,执行完成后,引用计数未归0,依然占据内存
                IE BOM和DOM使用的并不是JS对象,垃圾回收基于引用计数法
                IE9已经做了转化,BOM/DOM真正转化为JS对象
        3.如何管理内存?
            分配给web浏览器的可用内存数量通常比分配给桌面应用程序的少
            为了让页面获得好的性能,必须确保JS变量占用最少的内存
            释放不用的变量:解除引用
            局部变量:函数执行完成离开环境变量,变量将自动解除
            全局变量:手动进行解除引用,不意味着被回收,下一次被垃圾回收回收