JS的数据类型包括了原始类型和引用类型(对象类型)
1.原始数据类型
    String
    Number
    Boolean
    null
    undefined
    Symbol
2.引用数据类型称为Object类型
    Object
    Array
    Date
    RegExp
    Function
    保存在内存中的对象,不能直接操作内存空间,实际是操作对象的引用而不是实际对象
3.数据类型的存储形式
    1.栈(Stack)和堆(Heap)都是两种基本的数据结构
        栈在内存中自动分配内存空间
        堆在内存中动态分配内存空间,不一定会自动释放
        一般我们在项目中将对象类型手动设置为null,就是减少无用内存消耗
    2.原始数据类型是按值形式存放在栈中的数据段,内存空间可以自由分配
        且可以按值直接访问
    3.引用类型是放在堆内存中,每个对象在堆内存中有一个引用地址
        就像每个房间有一个房间号
        引用类型在栈中保存的就是这个对象在堆内存的引用地址
4.null
    typeof(null) = Object ?
    不同对象在底层原理的存储使用二进制保存的
    JS中如果二进制前三位是000,就会判断为Object类型
    typeof(undefined) = undefined
5.数据类型判断
    1.typeof:一元运算符,一般判断某个变量是否为空或者是什么类型
    2.instanceof:判断一个对象是不是另一个对象的实例
        测试一个对象在其原型链中是否存在一个构造函数prototype属性
6.类型转换
    1.显示转换和隐式转换
        每种转换又分为原始类型转换和对象类型转换
    2.显示转换也就是强制类型转换
    3.对于原始类型来说,转字符类型会默认调用toString方法
    4.除几个特殊的值'',undefined,NAN,null,false,0转化为false之外
        其他类型值都转化为true
    5.转化为数字类型
        1.字符串:数字转化为相应数字,其他为NaN
        2.布尔类型:true为1,false为0
        3.null:0
        4.undefined:NaN
        5.数组:数组为空转化为0,数组只有一个元素转化为对应元素,其他为NaN
        6.空字符串:0
    6.对象转原始类型
        1.会调用内置的valueOf()和toString()方法,这两个方法可以进行重写
            分为两种情况:转化为字符串类型或其他原始类型
                1.已经是原始类型,不需要再进行转化
                2.转字符串类型就调用内置函数中的toString()方法
                3.如果是其他基本类型,就调用内置函数valueOf()方法
                4.返回的不是原始类型,则继续调用toString()方法
                5.没有返回原始类型,则报错
    7.隐式转换
        自动将类型转化为需要的类型
            1.加法运算
                1.Boolean + Boolean转化为数字相加
                2.Boolean + Number布尔转化为数字相加
                3.Object + Number对象调用valueOf(),如果不是String,Boolean,Number
                    则会继续调用toString()转化为字符串
                4.字符串和字符串以及字符串与非字符串相加都会进行连接
            2.其他运算
                其他运算符的运算子一律转为数值
            3.逻辑运算符
                1.条件判断:都真为真,一假为假
                2.赋值操作:
                    1.A && B
                        首先看A的真假,A为假,返回A的值,A为真返回B的值
                    2.A || B
                        首先看A的真假,A为真,返回A的值,A为假返回B的值
            4.比较运算符
                ===:严格意义上的相等:类型和值
                ==:先判断类型,类型不同进行类型转换,再判断值是否相等