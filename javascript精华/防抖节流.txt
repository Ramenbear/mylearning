JS的节流和防抖
    1.滚动优化
        滚动优化不仅仅指滚动事件(scroll事件),还包括resize这类频繁触发的事件
            var i = 0;
            window.addEventListener('scroll',function(){
                console.log(i++);
            },false);
        在绑定scroll、resize这类事件的时候,当它发生时,触发的频次非常高,间隔近,如果事件中涉及
        大量的位置计算、DOM操作、元素重绘等工作且这些工作无法在下一个scroll事件触发前完成,就会
        造成浏览器掉帧,而且鼠标滚动是连续的,就会持续触发scroll事件,掉帧继续扩大,浏览器CPU使用率
        增加,影响用户体验。
        在滚动事件中绑定回调应用场景也非常多,在图片的懒加载、侧边栏浮动导航栏等
        拥有平滑滚动是非常重要的
    2.滚动与页面渲染的关系
        一个web页面的展示:
            1.JS:一般来说,使用JS来实现一些视觉变化的效果,比如动画或添加DOM元素
            2.Style:计算样式,根据CSS选择器,对每一个DOM元素匹配相应的CSS样式,确定了样式规则
            3.Layout:布局,计算每一个DOM元素在屏幕上显示的大小和位置,布局是相对的,会联动其它元素布局
            4.Paint:绘制,就是一个填充像素的过程,也就是一个DOM元素的可视效果
            5.Composite:渲染层合并,对页面DOM元素的绘制是在多个层上进行的,每个层完成绘制之后,浏览器
                会将所有的层按照合理的顺序合并成为一个图层,然后显示
        层概念,作为纹理传给GPU硬件加速
        一个网页生成,至少会渲染一次,用户访问过程中,会进行重排(reflow)和重绘(repaint)
        scroll和resize导致页面不断的重新渲染
        当你滚动页面时,浏览器会绘制这些层(合成层)里的一些像素,通过元素分组,当某个层的内容改变时
        只需要更新该层的结构,仅仅重绘变化的那一部分
防抖和节流
    scroll事件会触发页面的重新渲染,scroll事件的handler也会被高频度的触发,handler内部不应该
    拥有复杂操作,例如DOM操作
    1.防抖
        把多个顺序的调用合并成为一次,也就是在一定时间内,规定事件被触发的次数
            this.debounce(this.$refs.refresh, 500)

            debounce(func, delay) {
                let timer = null
                return function(...args) {
                    if(timer) clearTimeout(timer)
                    timer = setTimeout(() => {
                        func.apply(this, args)
                    }, delay)
                }
            }
    2.节流
        防抖:类似于我停止下滑,图片被加载出来,希望可以一直不断加载,或者数据的ajax请求
        页面在不断的滚动,我们希望滚动handler可以以一定的频率触发
        //节流函数,只允许一个函数在x毫秒内执行一次
        function throttle(func, wait, mustRun){
            var timeout,
                startTime = new Date();
            return function(){
                var context = this,
                    args = arguments,
                    cyrTime = new Date();
                clearTimeout(timeout);
                //如果达到了规定的触发时间间隔,触发handler
                if(curTime - startTime >= mustRun){
                    func.apply(context,args);
                    startTime = curTime;
                //没有到触发间隔,重新设置定时器
                }else{
                    timeout = setTimeout(func, wait);
                }
            };

        };
        function realFunc(){
            console.log("Success");
        }
        window.addEventListener('scroll', throttle(realFunc, 500, 1000));
        如果一段时间scroll触发的间隔一直短于500ms,那么我们希望调用的handler会至少在
        1000ms内触发一次
4.使用rAF触发滚动事件
5.mouseover/mouseenter的区别
        mouseover:当鼠标移入元素或者子元素都会触发事件,有一个重复触发、冒泡的过程:mouseout
        mouseenter:当鼠标移除元素本身(不包含元素的子元素)触发,不冒泡:mouseleave
6.JS的各种位置
        1.clientHeight:表示可视区域的高度,不包括border和滚动条
        2.offsetHeight:表示可视区域的高度,包括了了border和滚动条
        3.scrollHeight:表示所有区域的高度,包括了因为滚动而被隐藏的部分
        4.clientTop:表示边框border的厚度,未指定一般为0
        5.scrollTop:滚动后被隐藏的高度
        6.clientX、clientY是鼠标的坐标,分别标识横坐标和纵坐标
        7.offsetX、offsetY表示元素的初始坐标
7.js拖拽功能的实现
        首先是三个事件,mousedown,mousemove,mouseup
        当鼠标按下此时需要一个tag标识此时已按下,可以执行mousemove里的具体方法
        也可以使用HTML5的(Drag/drop) 
8.数组去重
        1.indexOf去重
        2.ES6中的Array.from(new Set(array))   