1.语义化标签
    <header></header>
    <nav></nav>
    <article></article>
    <section></section>
    <aside></aside>
    <footer></footer>
    优点:阅读更加清晰,利于SEO,方便设备解析
2.表单进行了增强
    button/checkbox/color/date/
    可以输入各种类型从而渲染相应的表单内容
    邮箱,数字,滑动条,日期框,url...
3.音频视频
    1.在这之前,浏览器支持音视频都是通过Flash来实现
    2.优点:
        1.浏览器原生支持
        2.可设置多类型音视频,兼容性更好
            媒体标签内部,通过<source>标签进行多种类型兼容,mp3,ogg
4.画布:Canvas
    1.Canvas是通过javascript来绘制2D图像的；
        Canvas是逐像素进行渲染的；
        在Canvas中一旦图形被绘制完成，它就不会得到浏览器的关注
        一旦其位置发生变化，那么整个场景需要重新绘制,包括任何已被该图形覆盖了的图形
    2.Svg
        SVG可缩放矢量图形
        是一种使用XML来描述2D图形的语言
        因为是基于XML,那么svg DOM中的每一个元素都可以绑定上javascript事件处理器
        在svg中每一个绘制的图形都被视为对象，svg元素的属性发生变化那么浏览器也会重新渲染图形的
5.拖放:drag
    1.设置元素为可拖放
        <img draggable="true"/>
    2.拖放开始
        dragstart开始拖放被拖放元素时触发
        drag(event)规定被拖放元素的数据
    3.放到何处
        默认下不允许将元素数据放入其他元素,所以需要阻止默认事件event.preventDefault()
        dragover被拖放元素在某元素内移动
    4.进行放置
        drop被目标元素完全接受被拖放元素
6.本地存储
    1.cookie/sessionStorage/localStorage
        1.共同点:
            都保存在浏览器端,并且都是同源的
        2.不同点:
            cookie始终在同源的http请求中携带,即cookie在浏览器和服务器间来回传递
            sessionStorage/localStorage不会自动将数据发给服务器,仅在本地保存
            cookie还有路径,可以限制在某个路径下,存储大小只有4K左右
            sessionStorage仅在浏览器窗口关闭前有效,不能持久保存
            localStorage始终有效,窗口或浏览器关闭也一直存在,持久数据
            cookie只是在设置的cookie过期时间之前一直有效
            session回话过程,关闭浏览器后消失,当页面不同即使同一页面打开两次也视为一次回话
            cookie/localStorage在所有同源窗口都是共享的,不管浏览器关闭与否都生效
        3.cookie
            保存用户登录状态
            存储ID在cookie中,下次登录就不需要再登陆了,设置过期时间,超过某个时间期限,cookie失效
7.Web Worker
    1.HTML的执行顺序是从上到下,单线程执行,当浏览器遇到某个JS脚本的时候
        页面变为不可响应(阻塞)
    2.web worker是运行在后台的js,独立于其他脚本,不会影响性能
        类似于多线程,配合postMessage与主页面进行交流
    3.允许开多线程,但是子线程归主线程调度,且不得操作DOM
8.地理定位
9.datalist
    呈现下拉框和选项
10.可编辑内容
    div标签变成可编辑的状态
11.跨域
    1.前端页面请求url地址的时候,该url与浏览器上的url地址必须处于同域上
        即域名,端口,协议三者必须相同,同源策略的限制,浏览器不允许执行其他网站的脚本
    2.解决方案:
        1.最流行解决方案:CORS
            通过后端设置CORS来解决,最主流的跨域解决方案
            跨域资源共享(CORS)是一种机制,使用额外的HTTP头来告诉浏览器
            让运行在一个origin(domain)上的web应用被准许访问来自不同源服务器上的指定资源
            在浏览器客户端不能跨域访问，而服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本
            不需要同源策略，也就没有跨越问题。简单地说，就是浏览器不能跨域，后台服务器可以跨域
            （一种是通过http-proxy-middleware插件设置后端代理； Origin 字段 Access-Control-Allow-Origin 
        2.最经典的跨域解决方案:JSONP
            1.原理:
                同源限制是跨域的本质,有这么一些标签没有同源限制
                <script>/<link>/<img>
            2.实现:
                1.假设后台有一个接口
                2.url通过<script>标签加载到页面中,跨域请求的目的:获取数据
                    在前后端需要约定一个执行函数的名称
                3.约定好执行函数名称,前端就得定义它,后台返回一段可执行代码
                4.JSONP返回的不是JSON格式的数据,而是一段可执行代码,可被前端执行
                5.缺点：只能发起GET请求
        3.最简单的跨域解决方案:NGINX(后端)（反向代理）
        4.理论上的跨域解决方案:window.name
        5.H5 poatMessage
            通过它我们可以实现多窗口间的信息传递，通过获取到
            调用 postMessage 来发送信息，在窗口中我们通过对 message 信息的监听来接收信息，
            以此来实现不同源间的信息交换。
        6.websocket
            websocket根本就不是基于HTTP协议,位于TCP/IP之上,跟HTTP协议同层的通信协议
        7.将 document.domain 设置为主域名，来实现相同子域名的跨域操作，这个时候主域名下的 cookie 
        就能够被子域名所访问。
        同时如果文档中含有主域名相同，子域名不同的 iframe 的话，我们也可以对这个 iframe 进行操作。
    如果是想要解决不同跨域窗口间的通信问题，比如说一个页面想要和页面的中的不同源的 iframe 进行通信的问题，我们可以使用 
    location.hash 或者 window.name 或者 postMessage 来解决。

    （2）使用 location.hash 的方法，我们可以在主页面动态的修改 iframe 窗口的 hash 值，然后在 iframe 窗口里实现监听
        函数来实现这样一个单向的通信。因为在 iframe 是没有办法访问到不同源的父级窗口的，所以我们不能直接修改父级窗口的 
        hash 值来实现通信，我们可以在 iframe 中再加入一个 iframe ，这个 iframe 的内容是和父级页面同源的，所以我们可
        以 window.parent.parent 来修改最顶级页面的 src，以此来实现双向通信。

    （3）使用 window.name 的方法，主要是基于同一个窗口中设置了 window.name 后不同源的页面也可以访问，所以不同源的子页
        面可以首先在 window.name 中写入数据，然后跳转到一个和父级同源的页面。这个时候级页面就可以访问同源的子页面中 wi
        ndow.name 中的数据了，这种方式的好处是可以传输的数据量大。
12.WebSocket
    http不支持持久性连接,WebSocket是H5中的协议,支持持久连接
    HTTP中的生命周期是通过Request来界定,也就是Request一个Response
    在Http1.0协议中,这次请求就结束了,在HTTP1.1中,改进了一个connection:keep-alive
    也就是,可以发起多次请求,接收回来多个响应,但一个请求对应了一个响应
    WebSocket是基于HTTP协议的,或者说一部分握手就是借用HTTP协议

        

