1.语义化标签
    <header></header>
    <nav></nav>
    <article></article>
    <section></section>
    <aside></aside>
    <footer></footer>
    优点:阅读更加清晰,利于SEO,方便设备解析
2.表单进行了增强
    可以输入各种类型从而渲染相应的表单内容
    邮箱,数字,滑动条,日期框...
3.音频视频
    1.在这之前,浏览器支持音视频都是通过Flash来实现
    2.优点:
        1.浏览器原生支持
        2.可设置多类型音视频,兼容性更好
            媒体标签内部,通过<source>标签进行多种类型兼容,mp3,ogg
4.画布:Canvas
5.拖放:drag
    1.设置元素为可拖放
        <img draggable="true"/>
    2.拖放开始
        dragstart开始拖放被拖放元素时触发
        drag(event)规定被拖放元素的数据
    3.放到何处
        默认下不允许将元素数据放入其他元素,所以需要阻止默认事件event.preventDefault()
        dragover被拖放元素在某元素内移动
    4.进行放置
        drop被目标元素完全接受被拖放元素
6.本地存储
    1.storage/manifest离线缓存
        之前前端本地存储都是靠cookie
    2.cookie/sessionStorage/localStorage
        1.共同点:
            都保存在浏览器端,并且都是同源的
        2.不同点:
            cookie始终在同源的http请求中携带,即cookie在浏览器和服务器间来回传递
            sessionStorage/localStorage不会自动将数据发给服务器,仅在本地保存
            cookie还有路径,可以限制在某个路径下,存储大小只有4K左右
            sessionStorage仅在浏览器窗口关闭前有效,不能持久保存
            localStorage始终有效,窗口或浏览器关闭也一直存在,持久数据
            cookie只是在设置的cookie过期时间之前一直有效
            session回话过程,关闭浏览器后消失,当页面不同即使同一页面打开两次也视为一次回话
            cookie/localStorage在所有同源窗口都是共享的,不管浏览器关闭与否都生效
        3.cookie
            保存用户登录状态
            存储ID在cookie中,下次登录就不需要再登陆了,设置过期时间,超过某个时间期限,cookie失效
    3.Cache Manifest
        应用缓存带来的优势:
            1.离线浏览:用户可以在应用离线时使用他们
            2.速度:已缓存资源加载的更快
            3.减少服务器负载,浏览器只从服务器下载更新过或更改过的资源
7.Web Worker
    1.HTML的执行顺序是从上到下,单线程执行,当浏览器遇到某个JS脚本的时候
        页面变为不可响应(阻塞)
    2.web worker是运行在后台的js,独立于其他脚本,不会影响性能
        类似于多线程,配合postMessage与主页面进行交流
    3.允许开多线程,但是子线程归主线程调度,且不得操作DOM
8.地理定为
9.datalist
    呈现下拉框和选项
10.可编辑内容
    div标签变成可编辑的状态
11.跨域
    1.前端页面请求url地址的时候,该url与浏览器上的url地址必须处于同域上
        即域名,端口,协议三者必须相同,同源策略的限制,浏览器不允许执行其他网站的脚本
    2.解决方案:
        1.最流行解决方案:CORS
            通过后端设置CORS来解决,最主流的跨域解决方案
            跨域资源共享(CORS)是一种机制,使用额外的HTTP头来告诉浏览器
            让运行在一个origin(domain)上的web应用被准许访问来自不同源服务器上的指定资源
        2.最经典的跨域解决方案:JSONP
            1.原理:
                同源限制是跨域的本质,有这么一些标签没有同源限制
                <script>/<link>/<img>
            2.实现:
                1.假设后台有一个接口
                2.url通过<script>标签加载到页面中,跨域请求的目的:获取数据
                    在前后端需要约定一个执行函数的名称
                3.约定好执行函数名称,前端就得定义它,后台返回一段可执行代码
                4.JSONP返回的不是JSON格式的数据,而是一段可执行代码,可被前端执行
        3.最简单的跨域解决方案:NGINX(后端)
        4.理论上的跨域解决方案:window.name
        5.H5 poatMessage
        6.websocket
            websocket根本就不是基于HTTP协议,位于TCP/IP之上,跟HTTP协议同层的通信协议

        

