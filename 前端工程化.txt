JS/CSS模块化开发
        分而治之是软件工程中的重要思想,复杂系统开发和维护的基石,在前端开发中同样适用
        在解决了开发效率和运行效率之后,开始思考维护效率,模块化是目前前端最流行的分治手段
        模块化开发的工程意义看视是复用,其实它的最大价值应该是分治
        不管是不是要复用某段代码,都有理由将其分治为一个模块
        JS模块化方案有很多AMD/CommonJS/UMD/ES6 Module等
        CSS模块化开发基本都是在less/sass/stylus等预处理器的import/mixin特性的支持下
    4.组件化开发与资源管理
        前端是一种技术问题较少、工程问题较多的软件开发领域
        开发一整套完整的Web应用时,前端面临更多的工程问题
            1.大体量:多功能、多页面、多状态、多系统
            2.大规模:多人甚至团队开发
            3.高性能:CDN部署、缓存控制、文件指纹、缓存复用、请求合并、按需加载、同步/异步加载
                    移动端首屏内嵌、HTTP2.0服务端资源推送
        1.组件化开发
            分治是非常重要的工程优化手段,前端作为一种GUI软件,光有JS/CSS的模块化还远远不够
            对于UI组件的分治也有着同样迫切的需求
                    
module:侧重于设计和开发阶段,关注与runtime
component:独立部署的软件单元,面向runtime,侧重于功能性
通俗的来讲,一个轮子上的螺钉就是一个module,整个轮子就是一个组件

##模块化开发

js原始功能:开发一些脚本
伴随着ajax异步请求的出现,形成了前后端分离
客户端需要完后的事情越来越多
为了应对代码的剧增,我们采用多个js文件
但是这种维护也会带来灾难性问题
例如全局变量同名
使用匿名函数来解决,各自加上自己的作用域,但是减少了代码的复用性

常见的模块化规范:CommonJS/AMD/CMD/Modules
#CommonJS
导出
module.exports = {

}
导入
let {test, demo} = require('moduleA')
#ES6
export
import {} from