##背景和现状
    任然有很多团队将前端开发归类为产品或者设计岗位(软件开发)
##前端究竟
    现在前端五花八门,无论是基础库还是高大上的框架,酷炫的宣传页面,厉害的小游戏
    不过这些一两个文件的小项目并非是前端的主要应用场景
    更具商业价值的是复杂的web应用,功能完善,界面繁多
    比如新闻聚合网站,社交网络,音乐互动社区,视频的上传和分享平台,系统应用,数据可视化平台
    本质来讲,所有web应用都是一种运行在网页浏览器的软件,这些软件的图形用户界面就是前端GUI
    web应用的快速发展,仍然没有多少人会从软件工程的角度去思考前端开发
    各种优秀的组件框架也相继涌现了出来
    前端开发也从WebPage模式转变为了以WebApp模式为主
    现在的前端项目已经不是过去拼几个网页再加上一些jQuery插件就可以完成的了
    工程一旦复杂就会衍生一系列的问题
    如何进行高效的多人协作,如何保证项目的可维护性,如何提高项目的开发质量
    这就需要在日常开发中制订一个规范化的前端工作流
    更好地规范统一项目的模块化开发和前端资源,让代码的维护和互相协作更加容易更加方便
    令前端开发自动化成为一种习惯
##构建前端工程的几个阶段
    1.库和框架的选择
        没有最好的框架,只有最适合的框架,根据项目特征来进行技术选型
        Vue/React/Angular还有一些传统的库比如jQuery/Btoostrp
    2.构建、管理工具
        选好合适的框架就可以开始敲代码了,合适的框架大大提高了开发效率,与此同时还需要兼顾运行性能
        选型一种或多种构建工具,对代码进行压缩、校验、管理,之后再以页面为单位进行简单的资源合并
        能做到最基本的JS/CSS压缩的web应用都已跨入标准互联网公司行列
    3.JS/CSS模块化开发
        分而治之是软件工程中的重要思想,复杂系统开发和维护的基石,在前端开发中同样适用
        在解决了开发效率和运行效率之后,开始思考维护效率,模块化是目前前端最流行的分治手段
        模块化开发的工程意义看视是复用,其实它的最大价值应该是分治
        不管是不是要复用某段代码,都有理由将其分治为一个模块
        JS模块化方案有很多AMD/CommonJS/UMD/ES6 Module等
        CSS模块化开发基本都是在less/sass/stylus等预处理器的import/mixin特性的支持下
    4.组件化开发与资源管理
        前端是一种技术问题较少、工程问题较多的软件开发领域
        开发一整套完整的Web应用时,前端面临更多的工程问题
            1.大体量:多功能、多页面、多状态、多系统
            2.大规模:多人甚至团队开发
            3.高性能:CDN部署、缓存控制、文件指纹、缓存复用、请求合并、按需加载、同步/异步加载
                    移动端首屏内嵌、HTTP2.0服务端资源推送
        1.组件化开发
            分治是非常重要的工程优化手段,前端作为一种GUI软件,光有JS/CSS的模块化还远远不够
            对于UI组件的分治也有着同样迫切的需求
                    
module:侧重于设计和开发阶段,关注与runtime
component:独立部署的软件单元,面向runtime,侧重于功能性
通俗的来讲,一个轮子上的螺钉就是一个module,整个轮子就是一个组件
