1.grid布局(栅格布局)
    1.Grid布局则是将容器划分成"行"和"列",产生单元格,然后指定"项目所在"的单元格,可以看作是二维布局
    2.最外层就是容器,容器的顶层子元素就是项目,grid布局只对项目起作用
    3.行与列交叉的就是单元格,网格线划分
    4.容器属性:
        1.display:display: grid(块级元素);display: inline-grid(行内元素)
            项目的float、display: inline-blockdisplay: table-cell、vertical-align和column等设置都将失效
        2.grid-template-columns属性定义每一列的列宽,grid-template-rows属性定义每一行的行高
        3.row-gap属性设置行与行的间隔(行间距),column-gap属性设置列与列的间隔(列间距),(gap)
        4.网格布局允许指定"区域"(area),一个区域由单个或多个单元格组成
            grid-template-areas属性用于定义区域
            中间一列为点,表示没有用到该单元格,或者该单元格不属于任何区域
            区域名影响网格线: 区域名-
        5.grid-auto-flow属性决定，默认值是row，即"先行后列"
            也可以将它设成column，变成"先列后行"
        6.justify-items属性设置单元格内容的水平位置（左中右）
            align-items属性设置单元格内容的垂直位置（上中下）
        7.justify-content属性是整个内容区域在容器里面的水平位置（左中右）
            align-content属性是整个内容区域的垂直位置（上中下）
        8.grid-auto-columns属性和grid-auto-rows属性用来设置,浏览器自动创建的多余网格的列宽和行高
    5.项目属性
        1.grid-column-start属性：左边框所在的垂直网格线
            grid-column-end属性：右边框所在的垂直网格线
            grid-row-start属性：上边框所在的水平网格线
            grid-row-end属性：下边框所在的水平网格线
        2.grid-area属性指定项目放在哪一个区域
2.layout布局
    左边或右边固定,边上自适应
3.flex布局
    1.任何一个容器都可以指定为flex布局,行内元素也可以指定为flex布局(依靠轴线,一维布局)
        设为Flex布局以后，子元素的float、clear和vertical-align属性将失效
    2.采用flex布局后,叫容器,它所有子元素,称之为项目
    3.容器默认存在两根轴:水平的主轴（main axis）和垂直的交叉轴（cross axis）
        主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end
        交叉轴的开始位置叫做cross start，结束位置叫做cross end
        项目默认沿主轴排列,单个项目占据的主轴空间叫做main size,占据的交叉轴空间叫做cross size
    4.容器属性
        1.flex-direction属性决定主轴的方向（即项目的排列方向）
            flex-direction:row|row-reverse|column|column-reverse
        2.flex-wrap属性决定如何换行
            flex-wrap:nowrap|wrap|wrap-reverse
        3.flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap
        4.justify-content属性定义了项目在主轴上的对齐方式
            justify-content:flex-start|flex-end|center|space-between|space-around
        5.align-items属性定义项目在交叉轴上如何对齐。
            align-items:flex-start|flex-end|center|baseline|stretch
        6.align-content属性定义了多根轴线的对齐方式,如果项目只有一根轴线,该属性不起作用
            align-content:flex-start|flex-end|center|space-between|space-around|stretch
    5.项目属性
        1.order属性定义项目的排列顺序,数值越小,排列越靠前,默认为0
        2.flex-grow属性定义项目的放大比例,默认为0,即如果存在剩余空间,也不放大
        3.flex-shrink属性定义了项目的缩小比例,默认为1,即如果空间不足,该项目将缩小
        4.flex-basis属性定义了在分配多余空间之前,项目占据的主轴空间（main size）
            浏览器根据这个属性,计算主轴是否有多余空间,它的默认值为auto,即项目的本来大小
        5.flex属性是flex-grow,flex-shrink和flex-basis的简写,默认值为0 1 auto,后两个属性可选
            flex: 1; //当 flex 取值为 none，则计算值为 0 0 auto；
            //当 flex 取值为 auto，则计算值为 1 1 auto；
            //当 flex 取值为一个非负数字,则该数字为flex-grow值,flex-shrink取1,flex-basis取0%;
        6.align-self属性允许单个项目有与其他项目不一样的对齐方式
            可覆盖align-items属性,默认值为auto,表示继承父元素的align-items属性
            如果没有父元素，则等同于stretch
4.双飞翼
    给center部分包裹了一个main通过设置margin主动将页面撑开
5.圣杯布局
    从上到下分为header container footer
    container部分定位三栏布局同样分为header container footer
    缺陷:center在container的padding中,宽度较小时会出现混乱
6.流式布局
    标准流