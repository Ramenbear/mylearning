www.w3.org/mdn/caniuse
##css笔记
    7.设置一个背景颜色,会填充哪些区域
        元素的content、padding、border
    9.inline-block、inline、block区别
        1.block 
            块级元素,前后都有换行符,能设置宽高,margin padding都有效
        2.inline
            前后无换行符,设置宽高无效,margin在竖直上无效,padding都有效
        3.inline-block
            前后无换行符,能设置宽高,margin padding都有效
    10.重绘和重排,怎么减少,如何让文档脱离文档流
        DOM变化影响到了几何属性,浏览器重新计算,其他元素也会受到影响,这时需要重新构造渲染:重排
        重绘:浏览器将受到影响的部分重新绘制到屏幕上的过程称为重绘
            原因：
                1.添加或者删除可见的DOM元素
                2.元素尺寸位置发生改变
                3.浏览器页面初始化
                4.浏览器窗口大小发生改变
            减少方法:
                1.不在布局信息改变时做DOM查询
                2.使用csstext,className一次性改变属性
                3.使用fragment
        对于多次重排的元素,比如说动画,使用绝对定位脱离文档流,使其不影响其他元素
    11.overflow的原理
        BFC块级格式化上下文,是css可视化渲染的一部分,它是一块区域,规定了内部块盒的渲染方式
        以及浮动相互的联系,当元素设置了overflow样式且值不为visible时,该元素就构建了一个BFC,
        BFC在计算高度时,内部浮动元素的高度也要计算在内,也就是说BFC只有一个浮动元素,高度也不会发生坍塌
        所以达到了清除浮动的目的
    12.清除浮动的方法
        1.使用带clear属性的空元素
            在浮动元素后面使用一个空元素<div class="clear"></div>
            并在css中赋予.clear{clear:both};属性即可清理浮动
        2.使用css的after伪元素
            伪元素和IEhack,可以完美兼容当前主流的各大浏览器,IEhack指的是触发hasLayout
            给浮动元素的容器添加一个clearfix的class,然后给这个class添加一个:
            after伪元素实现元素末尾添加一个看不见的块元素清理浮动
        3.overflow/overflow-x/overflow-y
            处理超出的内容
                visible: 默认
                scorll: 裁剪可以通过滚动来查看
                auto: 有超出部分滚动,没有正常显示
        4.给浮动元素的容器添加浮动
            使得整体浮动,影响布局,不推荐使用
        5.使用邻接元素
            什么都不做,给浮动元素后面的元素添加clear属性
    14.BFC
        BFC(块级格式化上下文,用于清除浮动,防止margin重叠)
        块级格式化上下文,是一个独立的渲染区域,并且有一定的布局规则
        BFC区域不会与float box重叠
        BFC是页面上的一个独立容器,子元素不会影响到外面
        计算BFC高度时,浮动元素也会参与计算
            以下元素会生成BFC:
            float不为none的元素
            position为fixed absolute
            overflow不为visible
            display为flex inline-flex inline-block table-cell table-caption
    15.两个嵌套的div,position都是absolute,子div设置top属性,top相对于哪个位置定位
        margin的外边缘
    19.css布局
        1.圣杯布局
            从上到下分为header container footer
            container部分定位三栏布局同样分为header container footer
            缺陷:center在container的padding中,宽度较小时会出现混乱
        2.双飞翼布局
            给center部分包裹了一个main通过设置margin主动将页面撑开
        3.flex布局:css3提供
        4.绝对定位布局
            container设置position:relative和overflow:hidden
            因为绝对定位的元素的参照物为第一个positon不为static的祖先元素
            left左浮动 right右浮动
            center使用绝对定位,通过设置left和right将吧两边撑开
            center使用top:0;bottom:0;将其高度撑开
        5.表格布局
            好处在于可以使得三栏布局的高度统一
        6.网格布局
            兼容性不太好
            将页面分割成多个区域
    22.transition和animation的区别
        大部分属性是相同的,都是随时间改变元素的属性值
        transition需要触发一个事件才能改变属性,2帧
        animation不需要触发任何事件的情况下才会随时间改变属性值,可以一帧一帧
    23.js动画和css3动画的差异
        渲染线程分为main thread和compositor thread
        如果css动画只改变transfrom和opacity,这时css动画得以在compositor thread完成
        js动画会在main thread执行,然后出发compositor thread进行下一步操作
        如果改变transfrom和opacity是不会layout或者paint的
        区别:
            功能涵盖面,js更大
            实现重构上:CSS3更加简单,性能跳优方向固定
            对帧速表现不好的低版本浏览器,css3可以实现自然降级
            css动画有天然事件支持
            css3有兼容性问题
    30.三栏布局的实现方式
        三列布局又分为两种:
            1.两列定宽一列自适应
            2.两侧定宽中间自适应
        1.两列定宽一列自适应
            1.使用float+margin
            2.使用float+overflow
            3.使用position
            4.使用table
            5.使用flex
            6.使用grid
        2.两侧定宽中间自适应
    32.display:table 和 table的区别
        相对应,diaplay:table的css声明能够让一个html元素和它的子节点像table元素一样,基于表格的css布局
        能够轻松定义一个单元格的边界、背景等样式,而不会因为使用table制表标签而出现语义化问题
        之所以淘汰了table系表格元素,因为使用div+css编写出来的文件比用table写出来的文件小
        而且table必须在页面完全加载后才显示,div是逐行显示
    37.iframe
            1.会阻塞主页面的onload事件,搜索引擎的检索程序无法解读这种页面,不利于SEO
            2.与主页面共享连接池,而浏览器对相同域的连接有限制,影响页面的并行加载
            解决方案:通过JS动态给iframe加上src属性
    38.em
        参考物是父元素的font-size
        如果自身定义了font-size按自身来计算
        整个页面em不是一个固定的值
    39.sprite
        精灵图,多个图片合成为一个图片(背景图)
        减少http请求,减轻服务器压力,加快网页响应速度
        通过background-position来选择相应的图片
    40.背景居中
        background-position: center -81px;  
    3.CSS特性
        1.继承(inherited)
            一个元素没有设置某属性的值,跟随父元素的值
            自己有属性,就不会继承,而是用自己的
            color,font-size,font-weight可继承
            width不可继承
            不可继承的可以inherit强制继承
            继承计算值,而不是字面量
        2.层叠
            基本层叠:相同选择器,后面层叠前面
            权重:
                通配符选择器:0
                元素选择符/伪元素选择器/关系选择器:1
                类选择器/属性选择器/伪类选择器:10
                ID选择器:100
                内联样式:1000
                !import:样式级最高
            作者>用户>浏览器>HTML
            行内>内嵌,内部>外部
##定位(normal flow)
    1.标准流
    2.position
        1.static:默认,视口
        2.relative:相对定位,占据原来空间
        3.absolute:绝对定位,相对于已定位的父元素,没有则相对于视口,脱离标准流,不占据空间
        4.fixed:固定定位,脱离标准流,不占据空间
        5.粘性定位:sticky,
            元素先按照普通文档流进行定位,然后相对于该元素在流中的BFC和最近的块级祖先元素定位
            而后元素定位表现为在跨越特定阈值前为相对定位,之后为固定定位
        6.inherit:
            从父元素继承position属性的值
    3.视口
        viewport-画布-看得见的
    4.脱离标准流
        随意设置宽高,不向上传递宽高
            display: block;
    5.绝对定位公式
        对于绝对定位元素来说:
            定位参照对象的宽度=left+right+margin-left+margin-right+绝对定位元素的实际占用宽度
            定位参照对象的宽度=top+bottom+margin-top+margin-bottom+绝对定位元素的实际占用宽度
    6.层叠
        父子:子元素层叠在父元素上
        非父子:
            1.都是非定位元素,在标准流中一般不存在层叠现象
            2.定位和非定位,定位元素层叠在非定位元素上
            3.都是定位,使用z-index来处理层叠关系
                兄弟关系:越大越在上面,相等后面元素在上面
                找祖先的邻近定位元素
##浮动
    1.脱离标准流
    2.边界紧贴着包含块,或者其他浮动元素的边界为止
    3.标准元素->浮动元素->定位元素
    4.浮动元素不能和行内级元素层叠,会挤出去
    5.初衷是实现文本环绕
    6.行内级元素,inline-block元素浮动后,其顶部将与所在行的顶部对齐
    7.浮动元素不能层叠
##flex布局
    1.css3布局
        1.多列布局
            columns:<column-width>||<column-count>;
            column-width:定义每列的宽度
            column-count:定义列数
            column-gap:定义列间距
            column-rule:<length>|<style>|<color>|<transparent>
            column-span:跨列显示
        3.伸缩盒布局
            1.display:flex|inline-flex(行内元素)
                Webkit内核的浏览器,必须加上-webkit前缀
                ！设定为flex布局后,子元素的float、clear、vertical-align属性都将失效
            2.采用flex布局的元素，称为flex容器,子元素自动成为成员，称为项目
                main axis:主轴
                cross axis:交叉轴
                main start:主轴开始
                main end:主轴结束
                cross start:交叉轴开始
                cross end:交叉轴结束
                单个项目占据的主轴空间:main size
                占据的交叉轴空间:cross size
            3.容器属性
                i.flex-direction:决定主轴的方向
                    row:主轴为水平,起点在左端
                    row-reverse:主轴为水平,起点在右端
                    column:主轴为垂直,起点在上沿
                    column-reverse:主轴为垂直,起点在下沿
                ii.flex-wrap:换行
                    nowrap(默认):不换行
                    wrap:换行,第一行在上方
                    wrap-reverse:换行,第一行在下方
                    flex-flow是flex-direction和flex-wrap的简写,默认为 row nowrap
                iii.justify-content:项目在主轴上的对齐方式
                    flex-start:左对齐
                    flex-end:右对齐
                    center:居中
                    space-between:两端对齐,项目间隔相等
                    space-around:每个项目两侧间隔相等
                iv.align-items:项目在交叉轴上如何对齐
                    flex-start:交叉轴的起点对齐
                    flex-end:交叉轴的终点对齐
                    center:交叉轴的中点对齐
                    baseline:项目的第一行文字的基线对齐
                    stretch(默认值):auto将占满整个容器的高度
                v.align-content:多根轴线的对齐方式,如果只有一根轴线,那么该属性不起作用
                vii.order:定义项目的排列顺序,数值越小,排列越靠前,默认情况下为0
                viii.flex-grow:放大比例 flex-shrink:缩小比例
##第十三章
    1.css3动画
        css3动画分为Transitions和Animations
            区别：大部分都相同,随时间改变元素的属性值
                  transition需要触发一个事件才可以改变元素的属性值:2帧
                  animation不需要触发任何事件的情况下随时间改变属性值:可以一帧一帧
    2.Transform变形
        实现文本或图像的旋转、缩放、倾斜、移动
        transform:none|<transform-function>[<transform-function>]*;
        matrix:定义矩阵变换
        translate:移动元素对象
        scale:缩放元素对象
        rotate:旋转元素对象
        skew:倾斜元素对象
    3.2D变形
        rotate(<angle>):接受旋转指定的元素对象,主要在二维空间进行操作
        scale():缩放元素,包括两个参数值,分别用来定义宽和高缩放比例
        translate():重新定义元素的坐标,分别定义x轴和y轴坐标
        skew():让元素倾斜显示,分别定义x、y倾斜的角度
        matrix():可以非常灵活的实现各种变形效果
    4.3D变形
        translate3d(tx,ty,tz)
        scale3d(sx,sy,sz)
        rotateX() rotateY() rotateZ()
    5.过渡动画
        Transformation呈现一种变形效果,Transition呈现一种过渡
        1.定义过渡属性
            transition-property:定义过渡动画的CSS属性名称
            transition-duration:定义转换动画的时间长度
            transition:定义过渡动画的延迟时间
            transition-timing-function:定义过渡动画的效果
    6.运动动画
        Animations实现更复杂的动画效果
        为了模拟关键帧动画,css3引入@keyframes规则,通过这个规则,用户可以创建动画
        动画原理:将一套css样式转变成另一套css样式
        @keyframes animationname {keyframes-selector {css-styles;}}
        animations-duration
        animations-timing-function
        animations-delay
        animations-iteration-count
        animations-direction
        animations-play-state
        animations-fill-mode
##第十八章
    1.css响应式设计
        弹性网格、液态布局、弹性图片
        为了适应不同需求,进行相应的响应和调整,能够兼容多个终端,无法跟上设备分辨率革新的步伐
        1.弹性图片
            1.无论何时都确保在图片原始宽度范围内,以最大的宽度同比完整地显示图片,不必再样式表中为图片设置宽度
                和高度,只需要让样式表在窗口尺寸发生变化时,辅助浏览器对图片进行缩放
            2.要实现图片的智能响应
                自适应图片缩放尺寸,在小设备上能够自动降低图片的分辨率
                Responsive Images的设计原理:使用rwd-images.js文件检测当前设备的屏幕分辨率,如果是大屏幕
                    设备,则向页面头部区域添加Base标记,并将后续的图片、脚本、样式表加载请求定向到一个虚拟路径
                    "/rwd-router",当这些请求到达服务器端,.htacces文件会决定这些请求所需要的是原始图片,还是
                    小尺寸的响应式图片,并进行相应的反馈输出,对于小屏幕的移动设备,原始尺寸不会被用到
            3.定义设备类型
                css3加入了Media Queries模块,允许添加媒体查询表达式