1.写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？
    vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中
    在交叉对比中，当新节点跟旧节点头尾交叉对比没有结果时，会根据新节点的key去对比旧节点数组中的key
    从而找到相应旧节点（这里对应的是一个key => index 的map映射）。如果没找到就认为是一个新增节点
    而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找
    相比而言。map映射的速度更快
2.['1', '2', '3'].map(parseInt) what & why ?
    首先让我们回顾一下，map函数的第一个参数callback：
    var new_array = arr.map(function callback(currentValue[, index[, array]]) 
    { // Return element for new_array }[, thisArg])
    这个callback一共可以接收三个参数，其中第一个参数代表当前被处理的元素，而第二个参数代表该元素的索引

    parseInt(string, radix)
    接收两个参数，第一个表示被处理的值（字符串），第二个表示为解析时的基数

    parseInt('1', 0) //radix为0时，且string参数不以“0x”和“0”开头时，按照10为基数处理。这个时候返回1
    parseInt('2', 1) //基数为1（1进制）表示的数中，最大值小于2，所以无法解析，返回NaN
    parseInt('3', 2) //基数为2（2进制）表示的数中，最大值小于3，所以无法解析，返回NaN
    map函数返回的是一个数组，所以最后结果为[1, NaN, NaN]
3.防抖和节流
    1.防抖
        触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间
        触发时取消前面的延时调用方法
        function debounce(fn) {
        let timeout = null; // 创建一个标记用来存放定时器的返回值
        return function () {
            clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉
            timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout,
            //这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数
            fn.apply(this, arguments);
            }, 500);
        };
        }
        function sayHi() {
        console.log('防抖成功');
        }
    2.节流
        高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率
        每次触发事件时都判断当前是否有等待执行的延时函数
        function throttle(fn) {
        let canRun = true; // 通过闭包保存一个标记
        return function () {
            if (!canRun) return; // 在函数开头判断标记是否为true，不为true则return
            canRun = false; // 立即设置为false
            setTimeout(() => { // 将外部传入的函数的执行放在setTimeout中
            fn.apply(this, arguments);
            // 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了
            //当定时器没有执行的时候标记永远是false，在开头被return掉
            canRun = true;
            }, 500);
        };
4.介绍下 Set、Map、WeakSet 和 WeakMap 的区别？
    Set
        成员唯一、无序且不重复
        [value, value]，键值与键名是一致的（或者说只有键值，没有键名）
        可以遍历，方法有：add、delete、has
    WeakSet
        成员都是对象
        成员都是弱引用，可以被垃圾回收机制回收，可以用来保存DOM节点，不容易造成内存泄漏
        不能遍历，方法有add、delete、has
    Map
        本质上是键值对的集合，类似集合
        可以遍历，方法很多可以跟各种数据格式转换
    WeakMap
        只接受对象作为键名（null除外），不接受其他类型的值作为键名
        键名是弱引用，键值可以是任意的，键名所指向的对象可以被垃圾回收，此时键名是无效的
        不能遍历，方法有get、set、has、delete
5.介绍下深度优先遍历和广度优先遍历
    BFS：队列
    DFS：递归
6.深度优先和广度优先实现拷贝函数
    // 如果是对象/数组，返回一个空的对象/数组，
    // 都不是的话直接返回原对象
    // 判断返回的对象和原有对象是否相同就可以知道是否需要继续深拷贝
    // 处理其他的数据类型的话就在这里加判断
    function getEmpty(o){
    if(Object.prototype.toString.call(o) === '[object Object]'){
        return {};
    }
    if(Object.prototype.toString.call(o) === '[object Array]'){
        return [];
    }
    return o;
    }

    function deepCopyBFS(origin){
    let queue = [];
    let map = new Map(); // 记录出现过的对象，用于处理环

    let target = getEmpty(origin);
    if(target !== origin){
        queue.push([origin, target]);
        map.set(origin, target);
    }

    while(queue.length){
        let [ori, tar] = queue.shift();
        for(let key in ori){
            // 处理环状
            if(map.get(ori[key])){
                tar[key] = map.get(ori[key]);
                continue;
            }

            tar[key] = getEmpty(ori[key]);
            if(tar[key] !== ori[key]){
                queue.push([ori[key], tar[key]]);
                map.set(ori[key], tar[key]);
            }
        }
    }

    return target;
    }

    function deepCopyDFS(origin){
    let stack = [];
    let map = new Map(); // 记录出现过的对象，用于处理环

    let target = getEmpty(origin);
    if(target !== origin){
        stack.push([origin, target]);
        map.set(origin, target);
    }

    while(stack.length){
        let [ori, tar] = stack.pop();
        for(let key in ori){
            // 处理环状
            if(map.get(ori[key])){
                tar[key] = map.get(ori[key]);
                continue;
            }

            tar[key] = getEmpty(ori[key]);
            if(tar[key] !== ori[key]){
                stack.push([ori[key], tar[key]]);
                map.set(ori[key], tar[key]);
            }
        }
    }

    return target;
    }
7.ES5/ES6 的继承除了写法以外还有什么区别？
    1.class 声明会提升，但不会初始化赋值。Foo 进入暂时性死区，类似于 let、const 声明变量
        const foo = new Foo(); // ReferenceError: Foo is not defined
        class Foo {
            constructor() {
                this.foo = 42;
            }
        }
    2.class 声明内部会启用严格模式
    3.class 的所有方法（包括静态方法和实例方法）都是不可枚举的
    4.class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，
        所以也没有[[construct]]，不能使用 new 来调用
    5.必须使用 new 调用 class
    6.class 内部无法重写类名
8.setTimeout、Promise、Async/Await 的区别
    1.setTimeout：宏任务队列
    2.Promise：微任务队列
    3.Async：async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，
        等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体
    4.Await： await的含义为等待，async 函数需要等待await后的函数执行完成并且有了返回结果（Promise对象），
        才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果
9.Async/Await 如何通过同步的方式实现异步

10.事件循环与异步机制
    首先<script>进入执行栈，遇到console.log()立即执行，遇到setTimeout加入宏任务队列，遇到async
    await之前的会立即执行，然后进入await执行，await后的加入微任务promise队列，又遇到promise
    promise中的立即执行，promise.then后的加入微任务队列，宏任务队列结束，立即执行微任务队列（渲染前）
    再取出setTimeout宏任务继续执行
11.数组扁平化
    Array.from(new Set(arr.flat(Infinity))).sort((a,b)=>{ return a-b})
12.JS 异步解决方案的发展历程以及优缺点
    1.回调函数
        缺点：引发回调地狱，不能用 try catch 捕获错误，不能 return
        根本问题：缺乏顺序性： 回调地狱导致的调试困难，和大脑的思维方式不符
                    嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身，即（控制反转）
                    嵌套函数过多的多话，很难处理错误
        优点：解决了同步的问题，（只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。）
    2.Promise
        优点：解决了回调地狱的问题，Promise 实现了链式调用，也就是说每次 then 后返回的都是一个全新 Promise，
                如果我们在 then 中 return ，return 的结果会被 Promise.resolve() 包装
        缺点：无法取消 Promise ，错误需要通过回调函数来捕获
    3.Generator
        特点：可以控制函数的执行
    4.Async/await
        async、await 是异步的终极解决方案
        优点是：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题
        缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。
13.Promise 构造函数是同步执行还是异步执行，那么 then 方法呢
    构造函数中是同步执行，会立马执行，then方法中是异步的，会被分配到微任务队列
14.自己实现new
    function _new(fn, ...arg) {
    const obj = Object.create(fn.prototype);
    const ret = fn.apply(obj, arg);
    return ret instanceof Object ? ret : obj;
}
15.HTTP2的多路复用
    在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，
    这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，
    但是依然有两个效率上的问题：

    第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，
            这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。
            （注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）
    第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，
            也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。
            HTTP/2的多路复用就是为了解决上述的两个性能问题。

    在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。
    帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。
    多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，
    对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，
    极大的提高传输性能。
16.三次握手和四次挥手
17.A、B 机器正常连接后，B 机器突然重启，问 A 此时处于 TCP 什么状态
18.React 中 setState 什么时候是同步的，什么时候是异步的
19.
20.介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块
22.重绘与回流
    1. 浏览器渲染机制
        浏览器采用流式布局模型（Flow Based Layout）
        浏览器会把HTML解析成DOM，把CSS解析成CSSOM，DOM和CSSOM合并就产生了渲染树（Render Tree）。
        有了RenderTree，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。
        由于浏览器使用流式布局，对Render Tree的计算通常只需要遍历一次就可以完成，但table及其内部元素除外，
        他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一。
    2. 重绘
        由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，
        例如outline, visibility, color、background-color等，重绘的代价是高昂的，
        因为浏览器必须验证DOM树上其他节点元素的可见性。
    3. 回流
        回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，
        因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了
        其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。  
    4. 浏览器优化
        现代浏览器大多都是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，
        至少一个浏览器刷新（即16.6ms）才会清空队列，但当你获取布局信息的时候，
        队列中可能有会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，
        触发回流与重绘来确保返回正确的值
    5.减少回流和重绘
        1.CSS
            使用 transform 替代 top
            使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流(改变了布局)
            避免使用table布局，可能很小的一个小改动会造成整个 table 的重新布局。
            尽可能在DOM树的最末端改变class，回流是不可避免的，但可以减少其影响。
            尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。
            避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多
            将动画效果应用到position属性为absolute或fixed的元素上，避免影响其他元素的布局，
            这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 requestAnimationFrame，
            详见探讨 requestAnimationFrame。
            避免使用CSS表达式，可能会引发回流。
            将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点，
            例如will-change、video、iframe等标签，浏览器会自动将该节点变为图层。
            CSS3 硬件加速（GPU加速），使用css3硬件加速，可以让transform、opacity、filters
            这些动画不会引起回流重绘 。但是对于动画的其它属性，比如background-color这些，
            还是会引起回流重绘的，不过它还是可以提升这些动画的性能。
        2.JS
            避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。
            避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。
            避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。
            对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。
23.观察者模式和订阅-发布模式的区别
    观察者模式中主体和观察者是互相感知的，发布-订阅模式是借助第三方来实现调度的，发布者和订阅者之间互不感知
24.Redux 和 Vuex 的设计思想
25.浏览器和Node事件循环的区别
26.模块化发展历程
27.let和const声明的全局变量并没有在全局对象?
    在全局作用域中，用 let 和 const 声明的全局变量并没有在全局对象中，只是一个块级作用域（Script）中
    获取，直接console.log()
28.cookie 和 token 都存放在 header 中，为什么不会劫持 token
    首先token不是防止XSS的，而是为了防止CSRF的；
    CSRF攻击的原因是浏览器会自动带上cookie，而浏览器不会自动带上token
29.聊聊 Vue 的双向数据绑定，Model 如何改变 View，View 又是如何改变 Model 的
30.请把俩个数组 [A1, A2, B1, B2, C1, C2, D1, D2] 和 [A, B, C, D]
    合并为 [A1, A2, A, B1, B2, B, C1, C2, C, D1, D2, D]

    let a1 =  ['A1', 'A2', 'B1', 'B2', 'C1', 'C2', 'D1', 'D2']
    let a2 = ['A', 'B', 'C', 'D'].map((item) => {
        return item + 3
    })

    let a3 = [...a1, ...a2].sort().map((item) => {
        if(item.includes('3')){
            return item.split('')[0]
        }
        return item
    })
31.输出0-9的数字
    //第一种
    for (var i = 0; i< 10; i++){
        setTimeout((i) => {
        console.log(i);
        }, 1000,i)   
    }

    //第二种
    for (let i = 0; i< 10; i++){
        setTimeout(() => {
        console.log(i);
        }, 1000)
    }
32.Virtual DOM 真的比操作原生 DOM 快吗？谈谈你的想法
33.函数打印结果
    var b = 10;
    (function b() {
        // 内部作用域，会先去查找是有已有变量b的声明，有就直接赋值20，确实有了呀。
        //发现了具名函数 function b(){}，拿此b做赋值；
        // IIFE的函数无法进行赋值（内部机制，类似const定义的常量），所以无效。
        // （这里说的“内部机制”，想搞清楚，需要去查阅一些资料，弄明白IIFE在JS引擎的工作方式，
        //堆栈存储IIFE的方式等）
        b = 20;
        console.log(b); // [Function b]
        console.log(window.b); // 10，不是20
    })();

    var b = 10;
    (function b() {
        'use strict'
        b = 20;
        console.log(b)
    })() // "Uncaught TypeError: Assignment to constant variable."
34.函数打印结果
    var b = 10;
    (function b() {
        window.b = 20; 
        console.log(b); // [Function b]
        console.log(window.b); // 20是必然的
    })();

    var b = 10;
    (function b() {
        var b = 20; // IIFE内部变量
        console.log(b); // 20
    console.log(window.b); // 10 
    })();
35.浏览器缓存机制
36.使用迭代的方式实现 flatten 函数 (扁平化处理)
    let arr = [1, 2, [3, 4, 5, [6, 7], 8], 9, 10, [11, [12, 13]]]
    const flatten = function (arr) {
        while (arr.some(item => Array.isArray(item))) {
            arr = [].concat(...arr)
        }
        return arr
    }

    console.log(flatten(arr))

    //ES6
    const flatten = array => array.reduce((acc, cur) => (Array.isArray(cur) ? 
    [...acc, ...flatten(cur)] : [...acc, cur]), [])
37.
38.a在什么情况下会输出1
    var a = {
    i: 1,
    toString() {
        return a.i++;
    }
    }

    if( a == 1 && a == 2 && a == 3 ) {
    console.log(1);
    }
39.介绍下 BFC 及其应用
40.
41.
57.opacity: 0、visibility: hidden、display: none 
59.给定两个数组，返回交集
    const intersect = (nums1, nums2) => {
    const map = {}
    const res = []
    for (let n of nums1) {
        if (map[n]) {
        map[n]++
        } else {
        map[n] = 1
        }
    }
    for (let n of nums2) {
        if (map[n] > 0) {
        res.push(n)
        map[n]--
        }
    }
    return res
    }
60.
97.React 和 Vue 的 diff 时间复杂度从 O(n^3) 优化到 O(n)
98.
99.输入 int 型，返回整数逆序后的字符串
    function fun(num){
        let num1 = num / 10;
        let num2 = num % 10;
        if(num1<1){
            return num;
        }else{
            num1 = Math.floor(num1)
            return `${num2}${fun(num1)}`
        }
    }
    var a = fun(12345)
100.
    function Foo() {
        Foo.a = function() {
            console.log(1)
        }
        this.a = function() {
            console.log(2)
        }
    }
    // 以上只是 Foo 的构建方法，没有产生实例，此刻也没有执行

    Foo.prototype.a = function() {
        console.log(3)
    }
    // 现在在 Foo 上挂载了原型方法 a ，方法输出值为 3

    Foo.a = function() {
        console.log(4)
    }
    // 现在在 Foo 上挂载了直接方法 a ，输出值为 4

    Foo.a();
    // 立刻执行了 Foo 上的 a 方法，也就是刚刚定义的，所以
    // # 输出 4

    let obj = new Foo();
    /* 这里调用了 Foo 的构建方法。Foo 的构建方法主要做了两件事：
    1. 将全局的 Foo 上的直接方法 a 替换为一个输出 1 的方法。
    2. 在新对象上挂载直接方法 a ，输出值为 2。
    */

    obj.a();
    // 因为有直接方法 a ，不需要去访问原型链，所以使用的是构建方法里所定义的 this.a，
    // # 输出 2

    Foo.a();
    // 构建方法里已经替换了全局 Foo 上的 a 方法，所以
    // # 输出 1
116.1 + "1"：11  
    2 * "2"：乘性操作符：如果有一个操作数不是数值，则在后台调用 Number()将其转换为数值
    [1, 2] + [2, 1]："1,22,1"
    Javascript中所有对象基本都是先调用valueOf方法，如果不是数值，再调用toString方法。
    "a" + + "b"："aNaN"
    后边的“+”将作为一元操作符，如果操作数是字符串，将调用Number方法将该操作数转为数值，
    如果操作数无法转为数值，则为NaN。

